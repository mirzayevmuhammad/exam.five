generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(uuid())
  email             String   @unique
  username          String   @unique
  firstName         String
  lastName          String
  password          String
  phone_number      String
  avatar            String?
  role              Role     @default(USER)
  is_email_verified Boolean  @default(false)
  is_phone_verified Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  videos        Video[]
  comments      Comment[]
  likes         Like[]
  subscriptions Subscription[] @relation("UserSubscriptions")
  subscribers   Subscription[] @relation("UserSubscribers")
  playlists     Playlist[]
}

model Video {
  id            String      @id @default(uuid())
  title         String
  description   String?
  thumbnail     String?
  videoUrl      String
  duration      Int // seconds
  status        VideoStatus @default(PROCESSING)
  visibility    Visibility  @default(PUBLIC)
  viewsCount    BigInt      @default(0)
  likesCount    Int         @default(0)
  dislikesCount Int         @default(0)
  createdAt     DateTime    @default(now())

  // Relations
  authorId      String
  author        User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments      Comment[]
  likes         Like[]
  PlaylistVideo PlaylistVideo[]
}

model Comment {
  id         String   @id @default(uuid())
  content    String
  likesCount Int      @default(0)
  createdAt  DateTime @default(now())

  // Relations
  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  videoId  String
  video    Video  @relation(fields: [videoId], references: [id], onDelete: Cascade)
  likes    Like[]
}

model Subscription {
  id                   String   @id @default(cuid())
  subscriberId         String
  subscriber           User     @relation("UserSubscriptions", fields: [subscriberId], references: [id], onDelete: Cascade)
  channelId            String
  channel              User     @relation("UserSubscribers", fields: [channelId], references: [id], onDelete: Cascade)
  notificationsEnabled Boolean  @default(true)
  createdAt            DateTime @default(now())

  @@unique([subscriberId, channelId])
}

model Playlist {
  id          String     @id @default(uuid())
  title       String
  description String?
  visibility  Visibility @default(PUBLIC)
  createdAt   DateTime   @default(now())

  // Relations
  authorId String
  author   User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  videos   PlaylistVideo[]
}

model PlaylistVideo {
  id       String   @id @default(cuid())
  position Int
  addedAt  DateTime @default(now())

  playlistId String
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  videoId    String
  video      Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([playlistId, videoId])
}

model Like {
  id        String   @id @default(uuid())
  type      LikeType
  createdAt DateTime @default(now())

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  videoId   String?
  video     Video?   @relation(fields: [videoId], references: [id], onDelete: Cascade)
  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, videoId, type])
  @@unique([userId, commentId, type])
}

enum LikeType {
  LIKE
  DISLIKE
}

enum Role {
  SUPERADMIN
  ADMIN
  USER
}

enum VideoStatus {
  UPLOADING
  PROCESSING
  PUBLISHED
  PRIVATE
  UNLISTED
  DELETED
}

enum Visibility {
  PUBLIC
  UNLISTED
  PRIVATE
}
