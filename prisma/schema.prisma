// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String         @id @default(uuid())
  email             String         @unique
  username          String         @unique
  phone_number      String?        @unique
  password          String
  firstName         String
  lastName          String
  avatar            String?
  role              Role           @default(USER)
  watchHistory      WatchHistory[]
  notifications     Notification[]
  is_email_verified Boolean        @default(false)
  is_phone_verified Boolean        @default(true)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  // Relations
  videos        Video[]
  comments      Comment[]
  likes         Like[]
  subscriptions Subscription[] @relation("UserSubscriptions")
  subscribers   Subscription[] @relation("UserSubscribers")
  playlists     Playlist[]

  @@map("user")
}

// KEYINROQ QO'SHISH MUMKIN BO'LGAN QISMLAR:
// - channelBanner String?
// - channelDescription String?
// - isBlocked Boolean @default(false)
// - blockedUntil DateTime?
// - loginAttempts Int @default(0)
// - subscribersCount Int @default(0)
// - totalViews BigInt @default(0)
// - watchHistory WatchHistory[]
// - notifications Notification[]

model Video {
  id             String          @id @default(uuid())
  title          String
  description    String?
  thumbnail      String?
  videoUrl       String
  duration       Int // seconds
  playlistVideos PlaylistVideo[]
  watchHistory   WatchHistory[]
  status         VideoStatus     @default(PROCESSING)
  visibility     Visibility      @default(PUBLIC)
  viewsCount     BigInt          @default(0)
  likesCount     Int             @default(0)
  dislikesCount  Int             @default(0)
  createdAt      DateTime        @default(now())

  // Relations
  authorId String
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments Comment[]
  likes    Like[]

  @@map("video")
}

// KEYINROQ QO'SHISH MUMKIN:
// - fileSize BigInt
// - resolution String // 1080p, 720p, etc.
// - category String?
// - tags String[]
// - commentsCount Int @default(0)
// - publishedAt DateTime?
// - watchHistory WatchHistory[]
// - playlistVideos PlaylistVideo[]

model Comment {
  id         String   @id @default(uuid())
  content    String
  likesCount Int      @default(0)
  createdAt  DateTime @default(now())

  // Relations
  authorId      String
  author        User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  videoId       String
  video         Video     @relation(fields: [videoId], references: [id], onDelete: Cascade)
  likes         Like[]
  // KEYINROQ QO'SHISH MUMKIN (REPLY SYSTEM):
  dislikesCount Int       @default(0)
  isPinned      Boolean   @default(false)
  updatedAt     DateTime  @updatedAt
  parentId      String?
  parent        Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies       Comment[] @relation("CommentReplies")

  @@map("comment")
}

model Subscription {
  id                   String   @id @default(cuid())
  subscriberId         String
  subscriber           User     @relation("UserSubscriptions", fields: [subscriberId], references: [id], onDelete: Cascade)
  channelId            String
  channel              User     @relation("UserSubscribers", fields: [channelId], references: [id], onDelete: Cascade)
  notificationsEnabled Boolean  @default(true)
  createdAt            DateTime @default(now())

  @@unique([subscriberId, channelId])
  @@map("subscription")
}

model Playlist {
  id          String     @id @default(uuid())
  title       String
  description String?
  visibility  Visibility @default(PUBLIC)
  createdAt   DateTime   @default(now())

  // Relations
  authorId String
  author   User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  videos   PlaylistVideo[]

  @@map("playlist")
}

model PlaylistVideo {
  id       String   @id @default(cuid())
  position Int
  addedAt  DateTime @default(now())

  playlistId String
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  videoId    String
  video      Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([playlistId, videoId])
  @@map("playlistvideo")
}

model Like {
  id        String   @id @default(uuid())
  type      LikeType
  createdAt DateTime @default(now())

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  videoId   String?
  video     Video?   @relation(fields: [videoId], references: [id], onDelete: Cascade)
  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, videoId, type])
  @@unique([userId, commentId, type])
  @@map("like")
}

enum LikeType {
  LIKE
  DISLIKE
}

// KEYINROQ QO'SHISH MUMKIN BO'LGAN MODELLAR:

model WatchHistory {
  id        String   @id @default(cuid())
  watchedAt DateTime @default(now())
  watchTime Int // seconds watched

  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  videoId String
  video   Video  @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([userId, videoId])
  @@map("watchhistory")
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("natification")
}

enum NotificationType {
  NEW_VIDEO
  NEW_SUBSCRIBER
  VIDEO_LIKED
  COMMENT_REPLY
  MENTION
}

enum Role {
  SUPERADMIN
  ADMIN
  USER
}

enum VideoStatus {
  UPLOADING
  PROCESSING
  PUBLISHED
  PRIVATE
  UNLISTED
  DELETED
}

enum Visibility {
  PUBLIC
  UNLISTED
  PRIVATE
}